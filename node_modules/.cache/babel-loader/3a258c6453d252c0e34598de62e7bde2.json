{"ast":null,"code":"var _jsxFileName = \"/Volumes/Transcend/react/my-portfolio/src/d3/LineChart.js\",\n    _s = $RefreshSig$();\n\nimport { useD3 } from \"../hooks/useD3\";\nimport React from \"react\";\nimport * as d3 from \"d3\"; // set the dimensions and margins of the graph\n// const margin = { top: 10, right: 30, bottom: 30, left: 60 },\n//   width = 460 - margin.left - margin.right,\n//   height = 400 - margin.top - margin.bottom;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet height = 500;\nlet width = 500;\n\nfunction LineChart(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const ref = useD3(svg => {\n    const mapData = data.map(d => {\n      return {\n        date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n        value: d.value\n      };\n    }); // set the dimensions and margins of the graph\n\n    const margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 60\n    };\n    svg.attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`); // Add X axis --> it is a date format\n\n    const x = d3.scaleTime().domain(d3.extent(mapData, function (d) {\n      return d.date;\n    })).range([0, width]);\n    svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(d3.axisBottom(x)); // Add Y axis\n\n    const y = d3.scaleLinear().domain([0, d3.max(mapData, function (d) {\n      return +d.value;\n    })]).range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y)); // Add the line\n\n    svg.append(\"path\").datum(mapData).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n      console.log(d.date);\n      return x(d.date);\n    }).y(function (d) {\n      console.log(d.value);\n      return y(d.value);\n    })); // });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: `0 0 ${height} ${width}`,\n      style: {\n        height: \"100%\"\n      },\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(LineChart, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["/Volumes/Transcend/react/my-portfolio/src/d3/LineChart.js"],"names":["useD3","React","d3","height","width","LineChart","data","ref","svg","mapData","map","d","date","timeParse","value","margin","top","right","bottom","left","attr","append","x","scaleTime","domain","extent","range","call","axisBottom","y","scaleLinear","max","axisLeft","datum","line","console","log"],"mappings":"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","sourcesContent":["import { useD3 } from \"../hooks/useD3\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\n\n// set the dimensions and margins of the graph\n// const margin = { top: 10, right: 30, bottom: 30, left: 60 },\n//   width = 460 - margin.left - margin.right,\n//   height = 400 - margin.top - margin.bottom;\nlet height = 500;\nlet width = 500;\nfunction LineChart({ data }) {\n  const ref = useD3((svg) => {\n\n    const mapData = data.map( (d) => {\n        return { date : d3.timeParse(\"%Y-%m-%d\")(d.date), value : d.value }\n    })\n    // set the dimensions and margins of the graph\n    const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n    svg\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Add X axis --> it is a date format\n    const x = d3\n      .scaleTime()\n      .domain(\n        d3.extent(mapData, function (d) {\n          return d.date;\n        })\n      )\n      .range([0, width]);\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(d3.axisBottom(x));\n\n       // Add Y axis\n       const y = d3.scaleLinear()\n       .domain([0, d3.max(mapData, function(d) { return +d.value; })])\n       .range([ height, 0 ]);\n     svg.append(\"g\")\n       .call(d3.axisLeft(y));\n\n    // Add the line\n    svg\n      .append(\"path\")\n      .datum(mapData)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\n        \"d\",\n        d3\n          .line()\n          .x(function (d) {\n            console.log(d.date);\n            return x(d.date);\n          })\n          .y(function (d) {\n            console.log(d.value);\n            return y(d.value);\n          })\n      );\n    // });\n  });\n\n  return (\n    <>\n      <svg\n        viewBox={`0 0 ${height} ${width}`}\n        style={{\n          height: \"100%\",\n        }}\n        ref={ref}\n      ></svg>\n    </>\n  );\n}\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"module"}