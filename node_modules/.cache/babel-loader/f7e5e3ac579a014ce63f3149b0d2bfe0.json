{"ast":null,"code":"var _jsxFileName = \"/Volumes/Transcend/react/my-portfolio/src/d3/PieChart.js\",\n    _s = $RefreshSig$();\n\nimport { useD3 } from \"../hooks/useD3\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet width = 100;\nlet height = 60;\n\nfunction PieChart(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const ref = useD3(svg => {\n    console.log(data); // const svg = d3.select(\"svg\"),\n    //   width = svg.attr(\"width\"),\n    //   height = svg.attr(\"height\"),\n\n    svg.attr(\"preserveAspectRatio\", \"xMinYMin meet\").attr(\"viewBox\", \"0 0 100 60\").classed(\"svg-content\", true);\n    const radius = Math.min(width, height) / 2.5;\n    const g = svg.append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\"); // set the color scale\n\n    const color = d3.scaleOrdinal().range(d3.schemeSet2); // Compute the position of each group on the pie:\n\n    const pie = d3.pie().value(function (d) {\n      return d[1];\n    });\n    const data_ready = pie(Object.entries(data)); // Now I know that group A goes from 0 degrees to x degrees and so on.\n    // shape helper to build arcs:\n\n    const arcGenerator = d3.arc().innerRadius(0).outerRadius(radius); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n    svg.selectAll(\"mySlices\").data(data_ready).join(\"path\").attr(\"d\", arcGenerator).attr(\"fill\", function (d) {\n      return color(d.data[0]);\n    }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7); // Now add the annotation. Use the centroid method to get the best coordinates\n\n    svg.selectAll(\"mySlices\").data(data_ready).join(\"text\").text(function (d) {\n      return \"grp \" + d.data[0];\n    }).attr(\"transform\", function (d) {\n      return `translate(${arcGenerator.centroid(d)})`;\n    }).style(\"text-anchor\", \"middle\").style(\"font-size\", 17);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: `0 0 ${height} ${width}`,\n      preserveAspectRatio: \"xMinYMin meet\",\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PieChart, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = PieChart;\nexport default PieChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PieChart\");","map":{"version":3,"sources":["/Volumes/Transcend/react/my-portfolio/src/d3/PieChart.js"],"names":["useD3","React","d3","width","height","PieChart","data","ref","svg","console","log","attr","classed","radius","Math","min","g","append","color","scaleOrdinal","range","schemeSet2","pie","value","d","data_ready","Object","entries","arcGenerator","arc","innerRadius","outerRadius","selectAll","join","style","text","centroid"],"mappings":"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","sourcesContent":["import { useD3 } from \"../hooks/useD3\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\n\nlet width = 100;\nlet height = 60;\n\nfunction PieChart({ data }) {\n  const ref = useD3((svg) => {\n    console.log(data);\n    // const svg = d3.select(\"svg\"),\n    //   width = svg.attr(\"width\"),\n    //   height = svg.attr(\"height\"),\n\n    svg\n      .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n      .attr(\"viewBox\", \"0 0 100 60\")\n      .classed(\"svg-content\", true);\n\n    const radius = Math.min(width, height) / 2.5;\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n    // set the color scale\n    const color = d3.scaleOrdinal().range(d3.schemeSet2);\n\n    // Compute the position of each group on the pie:\n    const pie = d3.pie().value(function (d) {\n      return d[1];\n    });\n    const data_ready = pie(Object.entries(data));\n    // Now I know that group A goes from 0 degrees to x degrees and so on.\n\n    // shape helper to build arcs:\n    const arcGenerator = d3.arc().innerRadius(0).outerRadius(radius);\n\n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n    svg\n      .selectAll(\"mySlices\")\n      .data(data_ready)\n      .join(\"path\")\n      .attr(\"d\", arcGenerator)\n      .attr(\"fill\", function (d) {\n        return color(d.data[0]);\n      })\n      .attr(\"stroke\", \"black\")\n      .style(\"stroke-width\", \"2px\")\n      .style(\"opacity\", 0.7);\n\n    // Now add the annotation. Use the centroid method to get the best coordinates\n    svg\n      .selectAll(\"mySlices\")\n      .data(data_ready)\n      .join(\"text\")\n      .text(function (d) {\n        return \"grp \" + d.data[0];\n      })\n      .attr(\"transform\", function (d) {\n        return `translate(${arcGenerator.centroid(d)})`;\n      })\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", 17);\n  });\n\n  return (\n    <>\n      <svg\n        viewBox={`0 0 ${height} ${width}`}\n        preserveAspectRatio=\"xMinYMin meet\"\n        ref={ref}\n      ></svg>\n    </>\n  );\n}\n\nexport default PieChart;\n"]},"metadata":{},"sourceType":"module"}