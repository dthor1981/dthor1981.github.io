{"ast":null,"code":"var _jsxFileName = \"/Volumes/Transcend/react/my-portfolio/src/d3/LineChart.js\",\n    _s = $RefreshSig$();\n\nimport { useD3 } from \"../hooks/useD3\";\nimport React from \"react\";\nimport * as d3 from \"d3\"; // set the dimensions and margins of the graph\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst margin = {\n  top: 10,\n  right: 30,\n  bottom: 30,\n  left: 60\n},\n      width = 460 - margin.left - margin.right,\n      height = 400 - margin.top - margin.bottom;\n\nasync function mapData(data) {\n  const promises = data.map(async d => {\n    // console.log(d);\n    const test = {\n      date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n      value: d.value\n    };\n    console.log(test);\n    return await {\n      date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n      value: d.value\n    };\n  }); // wait until all promises resolve\n\n  const results = await Promise.all(promises); //   await Promise.all(promises);\n}\n\nfunction LineChart(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const ref = useD3(svg => {\n    // const results = data.map(function (d) {\n    //     return {\n    //         date: d3.timeParse(\"%Y-%m-%d\")(d.date) ,\n    //         value: d.value\n    //     }\n    // });\n    // const finalMapData = results(data).then(console.log);\n    // console.log(finalMapData);\n    // console.log(results);\n    mapData(data).then(results => {\n      console.log(results); // set the dimensions and margins of the graph\n\n      const margin = {\n        top: 10,\n        right: 30,\n        bottom: 30,\n        left: 60\n      };\n      svg.attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`); // Add X axis --> it is a date format\n\n      const x = d3.scaleTime().domain(d3.extent(results, function (d) {\n        return d.date;\n      })).range([0, width]);\n      svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(d3.axisBottom(x)); // Add Y axis\n\n      const y = d3.scaleLinear().domain([0, d3.max(results, function (d) {\n        return +d.value;\n      })]).range([height, 0]);\n      svg.append(\"g\").call(d3.axisLeft(y)); // Add the line\n\n      svg.append(\"path\").datum(results).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n        return x(d.date);\n      }).y(function (d) {\n        return y(d.value);\n      }));\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: `0 0 ${height} ${width}`,\n      style: {\n        height: \"100%\",\n        marginRight: \"0px\",\n        marginLeft: \"0px\"\n      },\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(LineChart, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["/Volumes/Transcend/react/my-portfolio/src/d3/LineChart.js"],"names":["useD3","React","d3","margin","top","right","bottom","left","width","height","mapData","data","promises","map","d","test","date","timeParse","value","console","log","results","Promise","all","LineChart","ref","svg","then","attr","append","x","scaleTime","domain","extent","range","call","axisBottom","y","scaleLinear","max","axisLeft","datum","line","marginRight","marginLeft"],"mappings":"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","sourcesContent":["import { useD3 } from \"../hooks/useD3\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\n\n// set the dimensions and margins of the graph\nconst margin = { top: 10, right: 30, bottom: 30, left: 60 },\n  width = 460 - margin.left - margin.right,\n  height = 400 - margin.top - margin.bottom;\n\nasync function mapData(data) {\n  const promises = data.map(async (d) => {\n    // console.log(d);\n    const test = {\n    date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n      value: d.value,\n    }\n    console.log(test);\n    return await {\n      date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n      value: d.value,\n    };\n  });\n  // wait until all promises resolve\n  const results = await Promise.all(promises)\n//   await Promise.all(promises);\n}\n\nfunction LineChart({ data }) {\n  const ref = useD3((svg) => {\n    // const results = data.map(function (d) {\n    //     return {\n    //         date: d3.timeParse(\"%Y-%m-%d\")(d.date) ,\n    //         value: d.value\n    //     }\n    // });\n\n    // const finalMapData = results(data).then(console.log);\n\n    // console.log(finalMapData);\n    // console.log(results);\n\n    mapData(data).then((results) => {\n      console.log(results);\n\n      // set the dimensions and margins of the graph\n      const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n      svg\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n      // Add X axis --> it is a date format\n      const x = d3\n        .scaleTime()\n        .domain(\n          d3.extent(results, function (d) {\n            return d.date;\n          })\n        )\n        .range([0, width]);\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(d3.axisBottom(x));\n\n      // Add Y axis\n      const y = d3\n        .scaleLinear()\n        .domain([\n          0,\n          d3.max(results, function (d) {\n            return +d.value;\n          }),\n        ])\n        .range([height, 0]);\n      svg.append(\"g\").call(d3.axisLeft(y));\n\n      // Add the line\n      svg\n        .append(\"path\")\n        .datum(results)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\n          \"d\",\n          d3\n            .line()\n            .x(function (d) {\n              return x(d.date);\n            })\n            .y(function (d) {\n              return y(d.value);\n            })\n        );\n    });\n  });\n\n  return (\n    <>\n      <svg\n        viewBox={`0 0 ${height} ${width}`}\n        style={{\n          height: \"100%\",\n          marginRight: \"0px\",\n          marginLeft: \"0px\",\n        }}\n        ref={ref}\n      ></svg>\n    </>\n  );\n}\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"module"}