{"ast":null,"code":"import { blur2, max, ticks } from \"d3-array\";\nimport { slice } from \"./array.js\";\nimport constant from \"./constant.js\";\nimport Contours from \"./contours.js\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function () {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20,\n      // blur radius\n  k = 2,\n      // log2(grid cell size)\n  o = r * 3,\n      // grid offset, to pad for blur\n  n = dx + o * 2 >> k,\n      // grid width\n  m = dy + o * 2 >> k,\n      // grid height\n  threshold = constant(20);\n\n  function grid(data) {\n    var values = new Float32Array(n * m),\n        pow2k = Math.pow(2, -k),\n        i = -1;\n\n    for (const d of data) {\n      var xi = (x(d, ++i, data) + o) * pow2k,\n          yi = (y(d, i, data) + o) * pow2k,\n          wi = +weight(d, i, data);\n\n      if (wi && xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        var x0 = Math.floor(xi),\n            y0 = Math.floor(yi),\n            xt = xi - x0 - 0.5,\n            yt = yi - y0 - 0.5;\n        values[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n        values[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n        values[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n        values[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n      }\n    }\n\n    blur2({\n      data: values,\n      width: n,\n      height: m\n    }, r * pow2k);\n    return values;\n  }\n\n  function density(data) {\n    var values = grid(data),\n        tz = threshold(values),\n        pow4k = Math.pow(2, 2 * k); // Convert number of thresholds into uniform thresholds.\n\n    if (!Array.isArray(tz)) {\n      tz = ticks(Number.MIN_VALUE, max(values) / pow4k, tz);\n    }\n\n    return Contours().size([n, m]).thresholds(tz.map(d => d * pow4k))(values).map((c, i) => (c.value = +tz[i], transform(c)));\n  }\n\n  density.contours = function (data) {\n    var values = grid(data),\n        contours = Contours().size([n, m]),\n        pow4k = Math.pow(2, 2 * k),\n        contour = value => {\n      value = +value;\n      var c = transform(contours.contour(values, value * pow4k));\n      c.value = value; // preserve exact threshold value\n\n      return c;\n    };\n\n    Object.defineProperty(contour, \"max\", {\n      get: () => max(values) / pow4k\n    });\n    return contour;\n  };\n\n  function transform(geometry) {\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  } // TODO Optimize.\n\n\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = dx + o * 2 >> k;\n    m = dy + o * 2 >> k;\n    return density;\n  }\n\n  density.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function (_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function (_) {\n    if (!arguments.length) return [dx, dy];\n\n    var _0 = +_[0],\n        _1 = +_[1];\n\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function (_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function (_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = (Math.sqrt(4 * _ * _ + 1) - 1) / 2, resize();\n  };\n\n  return density;\n}","map":{"version":3,"sources":["/Volumes/Transcend/react/my-portfolio/node_modules/d3-contour/src/density.js"],"names":["blur2","max","ticks","slice","constant","Contours","defaultX","d","defaultY","defaultWeight","x","y","weight","dx","dy","r","k","o","n","m","threshold","grid","data","values","Float32Array","pow2k","Math","pow","i","xi","yi","wi","x0","floor","y0","xt","yt","width","height","density","tz","pow4k","Array","isArray","Number","MIN_VALUE","size","thresholds","map","c","value","transform","contours","contour","Object","defineProperty","get","geometry","coordinates","forEach","transformPolygon","transformRing","transformPoint","resize","_","arguments","length","_0","_1","Error","cellSize","log","LN2","call","bandwidth","sqrt"],"mappings":"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","sourcesContent":["import {blur2, max, ticks} from \"d3-array\";\nimport {slice} from \"./array.js\";\nimport constant from \"./constant.js\";\nimport Contours from \"./contours.js\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function() {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20, // blur radius\n      k = 2, // log2(grid cell size)\n      o = r * 3, // grid offset, to pad for blur\n      n = (dx + o * 2) >> k, // grid width\n      m = (dy + o * 2) >> k, // grid height\n      threshold = constant(20);\n\n  function grid(data) {\n    var values = new Float32Array(n * m),\n        pow2k = Math.pow(2, -k),\n        i = -1;\n\n    for (const d of data) {\n      var xi = (x(d, ++i, data) + o) * pow2k,\n          yi = (y(d, i, data) + o) * pow2k,\n          wi = +weight(d, i, data);\n      if (wi && xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        var x0 = Math.floor(xi),\n            y0 = Math.floor(yi),\n            xt = xi - x0 - 0.5,\n            yt = yi - y0 - 0.5;\n        values[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n        values[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n        values[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n        values[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n      }\n    }\n\n    blur2({data: values, width: n, height: m}, r * pow2k);\n    return values;\n  }\n\n  function density(data) {\n    var values = grid(data),\n        tz = threshold(values),\n        pow4k = Math.pow(2, 2 * k);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = ticks(Number.MIN_VALUE, max(values) / pow4k, tz);\n    }\n\n    return Contours()\n        .size([n, m])\n        .thresholds(tz.map(d => d * pow4k))\n      (values)\n        .map((c, i) => (c.value = +tz[i], transform(c)));\n  }\n\n  density.contours = function(data) {\n    var values = grid(data),\n        contours = Contours().size([n, m]),\n        pow4k = Math.pow(2, 2 * k),\n        contour = value => {\n          value = +value;\n          var c = transform(contours.contour(values, value * pow4k));\n          c.value = value; // preserve exact threshold value\n          return c;\n        };\n    Object.defineProperty(contour, \"max\", {get: () => max(values) / pow4k});\n    return contour;\n  };\n\n  function transform(geometry) {\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = (dx + o * 2) >> k;\n    m = (dy + o * 2) >> k;\n    return density;\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0], _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = (Math.sqrt(4 * _ * _ + 1) - 1) / 2, resize();\n  };\n\n  return density;\n}\n"]},"metadata":{},"sourceType":"module"}