{"ast":null,"code":"var _jsxFileName = \"/Volumes/Transcend/react/my-portfolio/src/d3/DonutChart.js\",\n    _s = $RefreshSig$();\n\nimport { useD3 } from \"../hooks/useD3\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet width = 100;\nlet height = 100;\nlet margin = 10;\n\nfunction DonutChart(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const ref = useD3(svg => {\n    console.log(data); // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n    const radius = Math.min(width, height) / 2 - margin;\n    svg.attr(\"preserveAspectRatio\", \"xMinYMin meet\").attr(\"viewBox\", \"0 0 200 120\").classed(\"svg-content\", true); // set the color scale\n\n    const color = d3.scaleOrdinal().range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"]); // Compute the position of each group on the pie:\n\n    const pie = d3.pie().value(d => d[1]);\n    const data_ready = pie(Object.entries(data)); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n    svg.selectAll(\"whatever\").data(data_ready).join(\"path\").attr(\"d\", d3.arc().innerRadius(60) // This is the size of the donut hole\n    .outerRadius(radius)).attr(\"fill\", d => color(d.data[0])).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: `0 0 ${height} ${width}`,\n      preserveAspectRatio: \"xMinYMin meet\",\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(DonutChart, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = DonutChart;\nexport default DonutChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"sources":["/Volumes/Transcend/react/my-portfolio/src/d3/DonutChart.js"],"names":["useD3","React","d3","width","height","margin","DonutChart","data","ref","svg","console","log","radius","Math","min","attr","classed","color","scaleOrdinal","range","pie","value","d","data_ready","Object","entries","selectAll","join","arc","innerRadius","outerRadius","style"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;;AAEA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,MAAM,GAAG,GAAb;AACA,IAAIC,MAAM,GAAG,EAAb;;AAEA,SAASC,UAAT,OAA8B;AAAA;;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AAC5B,QAAMC,GAAG,GAAGR,KAAK,CAAES,GAAD,IAAS;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EADyB,CAGzB;;AACA,UAAMK,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASX,KAAT,EAAgBC,MAAhB,IAA0B,CAA1B,GAA8BC,MAA7C;AACAI,IAAAA,GAAG,CACAM,IADH,CACQ,qBADR,EAC+B,eAD/B,EAEGA,IAFH,CAEQ,SAFR,EAEmB,aAFnB,EAGGC,OAHH,CAGW,aAHX,EAG0B,IAH1B,EALyB,CAUzB;;AACA,UAAMC,KAAK,GAAGf,EAAE,CACbgB,YADW,GAEXC,KAFW,CAEL,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAFK,CAAd,CAXyB,CAezB;;AACA,UAAMC,GAAG,GAAGlB,EAAE,CAACkB,GAAH,GAASC,KAAT,CAAgBC,CAAD,IAAOA,CAAC,CAAC,CAAD,CAAvB,CAAZ;AAEA,UAAMC,UAAU,GAAGH,GAAG,CAACI,MAAM,CAACC,OAAP,CAAelB,IAAf,CAAD,CAAtB,CAlByB,CAoBzB;;AACAE,IAAAA,GAAG,CACAiB,SADH,CACa,UADb,EAEGnB,IAFH,CAEQgB,UAFR,EAGGI,IAHH,CAGQ,MAHR,EAIGZ,IAJH,CAKI,GALJ,EAMIb,EAAE,CACC0B,GADH,GAEGC,WAFH,CAEe,EAFf,EAEmB;AAFnB,KAGGC,WAHH,CAGelB,MAHf,CANJ,EAWGG,IAXH,CAWQ,MAXR,EAWiBO,CAAD,IAAOL,KAAK,CAACK,CAAC,CAACf,IAAF,CAAO,CAAP,CAAD,CAX5B,EAYGQ,IAZH,CAYQ,QAZR,EAYkB,OAZlB,EAaGgB,KAbH,CAaS,cAbT,EAayB,KAbzB,EAcGA,KAdH,CAcS,SAdT,EAcoB,GAdpB;AAeD,GApCgB,CAAjB;AAsCA,sBACE;AAAA,2BACE;AACE,MAAA,OAAO,EAAG,OAAM3B,MAAO,IAAGD,KAAM,EADlC;AAEE,MAAA,mBAAmB,EAAC,eAFtB;AAGE,MAAA,GAAG,EAAEK;AAHP;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AASD;;GAhDQF,U;UACKN,K;;;KADLM,U;AAkDT,eAAeA,UAAf","sourcesContent":["import { useD3 } from \"../hooks/useD3\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\n\nlet width = 100;\nlet height = 100;\nlet margin = 10;\n\nfunction DonutChart({ data }) {\n  const ref = useD3((svg) => {\n    console.log(data);\n\n    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n    const radius = Math.min(width, height) / 2 - margin;\n    svg\n      .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n      .attr(\"viewBox\", \"0 0 200 120\")\n      .classed(\"svg-content\", true);\n\n    // set the color scale\n    const color = d3\n      .scaleOrdinal()\n      .range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"]);\n\n    // Compute the position of each group on the pie:\n    const pie = d3.pie().value((d) => d[1]);\n\n    const data_ready = pie(Object.entries(data));\n\n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n    svg\n      .selectAll(\"whatever\")\n      .data(data_ready)\n      .join(\"path\")\n      .attr(\n        \"d\",\n        d3\n          .arc()\n          .innerRadius(60) // This is the size of the donut hole\n          .outerRadius(radius)\n      )\n      .attr(\"fill\", (d) => color(d.data[0]))\n      .attr(\"stroke\", \"black\")\n      .style(\"stroke-width\", \"2px\")\n      .style(\"opacity\", 0.7);\n  });\n\n  return (\n    <>\n      <svg\n        viewBox={`0 0 ${height} ${width}`}\n        preserveAspectRatio=\"xMinYMin meet\"\n        ref={ref}\n      ></svg>\n    </>\n  );\n}\n\nexport default DonutChart;\n"]},"metadata":{},"sourceType":"module"}