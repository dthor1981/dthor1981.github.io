{"ast":null,"code":"// Simple caching for constant-radius points.\nlet cacheDigits, cacheAppend, cacheRadius, cacheCircle;\nexport default class PathString {\n  constructor(digits) {\n    this._append = digits == null ? append : appendRound(digits);\n    this._radius = 4.5;\n    this._ = \"\";\n  }\n\n  pointRadius(_) {\n    this._radius = +_;\n    return this;\n  }\n\n  polygonStart() {\n    this._line = 0;\n  }\n\n  polygonEnd() {\n    this._line = NaN;\n  }\n\n  lineStart() {\n    this._point = 0;\n  }\n\n  lineEnd() {\n    if (this._line === 0) this._ += \"Z\";\n    this._point = NaN;\n  }\n\n  point(x, y) {\n    switch (this._point) {\n      case 0:\n        {\n          this._append`M${x},${y}`;\n          this._point = 1;\n          break;\n        }\n\n      case 1:\n        {\n          this._append`L${x},${y}`;\n          break;\n        }\n\n      default:\n        {\n          this._append`M${x},${y}`;\n\n          if (this._radius !== cacheRadius || this._append !== cacheAppend) {\n            const r = this._radius;\n            const s = this._;\n            this._ = \"\"; // stash the old string so we can cache the circle path fragment\n\n            this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;\n            cacheRadius = r;\n            cacheAppend = this._append;\n            cacheCircle = this._;\n            this._ = s;\n          }\n\n          this._ += cacheCircle;\n          break;\n        }\n    }\n  }\n\n  result() {\n    const result = this._;\n    this._ = \"\";\n    return result.length ? result : null;\n  }\n\n}\n\nfunction append(strings) {\n  let i = 1;\n  this._ += strings[0];\n\n  for (const j = strings.length; i < j; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\n\nfunction appendRound(digits) {\n  const d = Math.floor(digits);\n  if (!(d >= 0)) throw new RangeError(`invalid digits: ${digits}`);\n  if (d > 15) return append;\n\n  if (d !== cacheDigits) {\n    const k = 10 ** d;\n    cacheDigits = d;\n\n    cacheAppend = function append(strings) {\n      let i = 1;\n      this._ += strings[0];\n\n      for (const j = strings.length; i < j; ++i) {\n        this._ += Math.round(arguments[i] * k) / k + strings[i];\n      }\n    };\n  }\n\n  return cacheAppend;\n}","map":{"version":3,"sources":["/Volumes/Transcend/react/my-portfolio/node_modules/d3-geo/src/path/string.js"],"names":["cacheDigits","cacheAppend","cacheRadius","cacheCircle","PathString","constructor","digits","_append","append","appendRound","_radius","_","pointRadius","polygonStart","_line","polygonEnd","NaN","lineStart","_point","lineEnd","point","x","y","r","s","result","length","strings","i","j","arguments","d","Math","floor","RangeError","k","round"],"mappings":"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","sourcesContent":["// Simple caching for constant-radius points.\nlet cacheDigits, cacheAppend, cacheRadius, cacheCircle;\n\nexport default class PathString {\n  constructor(digits) {\n    this._append = digits == null ? append : appendRound(digits);\n    this._radius = 4.5;\n    this._ = \"\";\n  }\n  pointRadius(_) {\n    this._radius = +_;\n    return this;\n  }\n  polygonStart() {\n    this._line = 0;\n  }\n  polygonEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {\n    if (this._line === 0) this._ += \"Z\";\n    this._point = NaN;\n  }\n  point(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._append`M${x},${y}`;\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._append`L${x},${y}`;\n        break;\n      }\n      default: {\n        this._append`M${x},${y}`;\n        if (this._radius !== cacheRadius || this._append !== cacheAppend) {\n          const r = this._radius;\n          const s = this._;\n          this._ = \"\"; // stash the old string so we can cache the circle path fragment\n          this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;\n          cacheRadius = r;\n          cacheAppend = this._append;\n          cacheCircle = this._;\n          this._ = s;\n        }\n        this._ += cacheCircle;\n        break;\n      }\n    }\n  }\n  result() {\n    const result = this._;\n    this._ = \"\";\n    return result.length ? result : null;\n  }\n}\n\nfunction append(strings) {\n  let i = 1;\n  this._ += strings[0];\n  for (const j = strings.length; i < j; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\n\nfunction appendRound(digits) {\n  const d = Math.floor(digits);\n  if (!(d >= 0)) throw new RangeError(`invalid digits: ${digits}`);\n  if (d > 15) return append;\n  if (d !== cacheDigits) {\n    const k = 10 ** d;\n    cacheDigits = d;\n    cacheAppend = function append(strings) {\n      let i = 1;\n      this._ += strings[0];\n      for (const j = strings.length; i < j; ++i) {\n        this._ += Math.round(arguments[i] * k) / k + strings[i];\n      }\n    };\n  }\n  return cacheAppend;\n}\n"]},"metadata":{},"sourceType":"module"}